#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    tcolors-gtk
    ~~~~~~~~~~~

    Set Terminal ANSI Colors.

    :Compatibility: Python 2.7 / 3.2
    :Copyright: (c) 2014 Miroslav Koškár <http://mkoskar.com/>
    :License: BSD 2-Clause, see LICENSE for details
"""

from __future__ import print_function

from os import kill
from signal import signal, SIG_DFL, SIGINT
from sys import exit, stdout
import argparse
import sys
import textwrap

sys.dont_write_bytecode = True

from gi.repository import Gdk
from gi.repository import Gtk
import tcolors


def color_to_rgb(color):
    rgb = (color.red, color.green, color.blue)
    rgb = tuple(map(lambda x: int(x * 255), rgb))
    return '#{:02X}{:02X}{:02X}'.format(*rgb)


def parse_color(rgb):
    color = Gdk.Color.parse(rgb)
    return color[1] if color[0] else None


class MainWindow(Gtk.Window):

    def __init__(self):
        Gtk.Window.__init__(self, title='Set Terminal ANSI Colors', resizable=False)

        grid = Gtk.Grid()

        self.pbuttons = []
        for n in range(16):
            btn = Gtk.ColorButton()
            btn.set_size_request(80, 80)
            btn.connect('color-set', self.on_color_set)
            btn.setfn = lambda c, n = n: tcolors.set_colorp(n, c, flush=True)
            self.pbuttons.append(btn)

            btn_reset = Gtk.Button('color{}'.format(n), sensitive=False)
            btn_reset.connect('clicked', self.on_color_reset, btn)
            btn.btn_reset = btn_reset

            grid.attach(btn, n % 8, 2 * (n // 8), 1, 1)
            grid.attach(btn_reset, n % 8, 1 + 2 * (n // 8), 1, 1)

        btn = Gtk.ColorButton()
        btn.set_size_request(0, 50)
        btn.connect('color-set', self.on_color_set)
        btn.setfn = lambda c: tcolors.set_colorfg(c, flush=True)
        self.fgbutton = btn

        btn_reset = Gtk.Button('fg', sensitive=False)
        btn_reset.connect('clicked', self.on_color_reset, btn)
        btn.btn_reset = btn_reset

        grid.attach(btn, 0, 5, 3, 1)
        grid.attach(btn_reset, 0, 6, 3, 1)

        btn = Gtk.ColorButton()
        btn.set_size_request(0, 50)
        btn.connect('color-set', self.on_color_set)
        btn.setfn = lambda c: tcolors.set_colorbg(c, flush=True)
        self.bgbutton = btn

        btn_reset = Gtk.Button('bg', sensitive=False)
        btn_reset.connect('clicked', self.on_color_reset, btn)
        btn.btn_reset = btn_reset

        grid.attach(btn, 3, 5, 3, 1)
        grid.attach(btn_reset, 3, 6, 3, 1)

        btn = Gtk.ColorButton()
        btn.set_size_request(0, 50)
        btn.connect('color-set', self.on_color_set)
        btn.setfn = lambda c: tcolors.set_colorcur(c, flush=True)
        self.curbutton = btn

        btn_reset = Gtk.Button('cur', sensitive=False)
        btn_reset.connect('clicked', self.on_color_reset, btn)
        btn.btn_reset = btn_reset

        grid.attach(btn, 6, 5, 2, 1)
        grid.attach(btn_reset, 6, 6, 2, 1)

        self.add(grid)

    def on_color_set(self, cbtn):
        color = cbtn.get_rgba()
        if hasattr(cbtn, 'saved_color'):
            style = cbtn.btn_reset.get_style_context()
            if not color.equal(cbtn.saved_color):
                style.add_class('changed')
            else:
                style.remove_class('changed')
        cbtn.setfn(color_to_rgb(cbtn.get_rgba()))

    def on_color_reset(self, w, cbtn):
        cbtn.set_rgba(cbtn.saved_color)
        self.on_color_set(cbtn)

    def init_color(self, cbtn, rgb):
        color = parse_color(rgb)
        if color:
            cbtn.set_color(color)
            cbtn.saved_color = cbtn.get_rgba()
            cbtn.btn_reset.set_sensitive(True)
        else:
            cbtn.set_color(parse_color('#000000'))
            cbtn.btn_reset.set_sensitive(False)

    def init_xcolors(self, file, prefix):
        xcolors = tcolors.set_from_xcolors(file, prefix)
        stdout.flush()
        for c in xcolors:
            name, value, p, fg, bg, cur = c
            if fg:
                self.init_color(self.fgbutton, value)
            elif bg:
                self.init_color(self.bgbutton, value)
            elif cur:
                self.init_color(self.curbutton, value)
            else:
                self.init_color(self.pbuttons[int(p)], value)

    def init_tcolors(self):
        with tcolors.get_term_colors():
            self.init_color(self.fgbutton, tcolors.get_colorfg())
            self.init_color(self.bgbutton, tcolors.get_colorbg())
            self.init_color(self.curbutton, tcolors.get_colorcur())
            for n, cbtn in enumerate(self.pbuttons):
                self.init_color(cbtn, tcolors.get_colorp(n))


parser = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description=textwrap.dedent("""
        Set terminal ANSI colors.
        Colors are initialized from terminal itself (if supported).
        If <file> is passed, matching X resources are used instead.
        """
    )
)
parser.add_argument('--prefix', default='*',
                    help='X resources prefix (default: *)')
parser.add_argument('file', nargs='?',
                    help="X resources source file; '-' for stdin")
args = parser.parse_args()
main = MainWindow()

try:
    if (args.file):
        main.init_xcolors(args.file, args.prefix)
    else:
        main.init_tcolors()
except KeyboardInterrupt:
    signal(SIGINT, SIG_DFL)
    os.kill(os.getpid(), SIG_DFL)
except RuntimeError as e:
    print('{}: error: {}'.format(parser.prog, e), file=stderr)
    exit(1)

signal(SIGINT, SIG_DFL)

screen = Gdk.Screen.get_default()
css_provider = Gtk.CssProvider()
css_provider.load_from_data(
    'GtkButton.changed { background-color: #bbb; font-weight: bold; }'.encode()
)
style = Gtk.StyleContext()
style.add_provider_for_screen(screen, css_provider,
                              Gtk.STYLE_PROVIDER_PRIORITY_USER)

main.connect('delete-event', Gtk.main_quit)
main.show_all()
Gtk.main()
